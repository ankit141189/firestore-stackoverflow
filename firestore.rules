rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /questions/{questionId}/answers/{answerId} {
      allow read;
      
      function isUpdateVoteRequest() {
        return request.auth.uid != null &&
          request.resource.data.votes[request.auth.uid] != null
      }
      
      function isAuthor() {
        return request.auth.uid != null &&
      		request.auth.uid == resource.data.submitter.id;
      }
      
      allow create: if request.auth.uid != null &&
      		request.auth.uid == request.resource.data.submitter.id &&
          request.resource.data.questionId == questionId;
      
      allow update: if isUpdateVoteRequest() || isAuthor();
      
      allow delete: if request.auth.uid == resource.data.submitter.id;
    }
    
    match /questions/{questionId} {
      allow read;
      
      allow create: if request.auth.uid != null &&
      		request.auth.uid == request.resource.data.createdByUser;
          
      function isAnswerCountUpdate() {
      	return 
        	request.resource.data.answerCount == resource.data.answerCount + 1 ||
          request.resource.data.answerCount + 1 == resource.data.answerCount  
      }
      
      function isSubscriberUpdate() {
      	return request.resource.data.subscribers != null &&
        		request.auth.uid != null;
      }
      
      allow update: if isAnswerCountUpdate() || isSubscriberUpdate() ||
      		request.auth.uid == resource.data.createdByUser;
          
      allow delete: if request.auth.uid == resource.data.createdByUser; 
    }
  
    match /{path=**}/answers/{doc} {
    	allow read: if request.auth.uid != null
    } 
    
    match /tags/{tagId} {
      allow read;
    }
  }
}